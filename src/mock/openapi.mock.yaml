# Базовая реализация. Не включает
# - oneOf, anyOf, allOf, not

openapi: 3.0.0
info:
  title: Demo API
  version: 1.0.0
  description: Demo API with various OpenAPI features

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

components:
  schemas:
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    Address:
      type: object
      properties:
        street:
          type: string
        city:
          type: string
        country:
          type: string
        zipCode:
          type: string

    User:
      type: object
      required:
        - id
        - email
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
          format: email
        name:
          type: string
        # OpenAPI не позволяет сделать именованные значения enum как в typescript: `enum Role { user: 'user_role', ... }`
        # По этому в typescript описать Enum можно только так: `"user_role" | "admin_role" | "guest_role"`
        role:
          type: string
          enum:
            - user_role
            - admin_role
            - guest_role
        address:
          $ref: '#/components/schemas/Address'
        tags:
          type: array
          items:
            type: string
        metadata:
          type: object
          additionalProperties:
            type: string
        birthDate:
          type: string
          format: date
        createdAt:
          type: string
          format: date-time
        score:
          type: number
          format: float
          minimum: 0
          maximum: 100
        isActive:
          type: boolean
          default: true

    RefToUser:
      $ref: '#/components/schemas/User'
  parameters:
    IdInPath:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64

    PageQuery:
      name: page
      in: query
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1

    AuthHeader:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        pattern: '^Bearer \w+$'

  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized access
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /users:
    get:
      summary: List users
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/AuthHeader'
        - name: role
          in: query
          schema:
            type: string
            enum: [admin, user, guest]
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      summary: Create user
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                name:
                  type: string
                role:
                  type: string
                  enum: [user, guest]
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/IdInPath'

    get:
      summary: Get user by ID
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Partially update user
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                role:
                  type: string
                  enum: [admin, user, guest]
      responses:
        '200':
          description: User partially updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      responses:
        '204':
          description: User deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /users/batch:
    post:
      summary: Batch create users
      parameters:
        - $ref: '#/components/parameters/AuthHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                users:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Users created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'